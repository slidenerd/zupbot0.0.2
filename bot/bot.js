const
    builder = require('../core'),
    carousel = require('../utils/carousel'),
    payloads = require('../config/payloads'),
    platforms = require('../utils/platforms'),
    userController = require('../controllers/user');

// Create chat bot
const connector = new builder.ChatConnector({
    appId: '92762e6c-5017-4a0c-a0bc-2194d94ca9dd',
    appPassword: 'KgRnrjrxbEQtZHRghbATP7c'
});
const bot = new builder.UniversalBot(connector);

//=========================================================
// Bots Middleware
//=========================================================

// Anytime the major version is incremented any existing conversations will be restarted.

let dialogVersionOptions = {
    version: 1.0,
    resetCommand: /^reset/i
};
bot.use(builder.Middleware.dialogVersion(dialogVersionOptions));

//=========================================================
// Bots Dialogs
//=========================================================

//Run this dialog the very first time for a particular user
bot.use(builder.Middleware.firstRun({
    version: 1.0,
    dialogId: '/firstRun'
}));

bot.dialog('/firstRun', firstRun);
bot.dialog('/', onMessage);

/**
 * Send a greeting message for each specific platform
 * Add the user to the mongodb database if the user does not exist
 */
function firstRun(session) {
    console.log('This user is running our bot the first time')
    platforms.firstRun(session);
    userController.addBotUser(session);
    reply(session)
    session.endDialog()
}

/**
 * Add the user to the mongodb database if the user does not exist
 */
function onMessage(session) {
    console.log('This user is running our bot the subsequent time')
    userController.addBotUser(session);
    if (platforms.isGeolocation(session)) {
        handleGeolocation(session)
    }
    else {
        reply(session)
    }
}

function handleGeolocation(session) {
    let geolocation = platforms.getGeolocation(session);
    if (geolocation) {
        zup.brain.set(session.message.user.id, 'latitude', geolocation.lat)
        zup.brain.set(session.message.user.id, 'longitude', geolocation.lon)
    }
    zup.brain.reply(session.message.user.id, 'jshandlegeolocation')
        .then((response) => {
            session.send(response);
        })
        .catch((error) => {
            session.send(error);
        })
}

function preProcessReply(text) {
    switch (text) {
        case payloads.FACEBOOK_GET_STARTED:
            return 'get started'

        case payloads.FACEBOOK_PERSISTENT_MENU_HELP:
            return 'help'

        case payloads.FACEBOOK_FLIPKART_SHOW_MORE:
            return 'show more'

        case payloads.FACEBOOK_FLIPKART_CANCEL:
            return 'no'

        default:
            return text;
    }
}

/**
 * Generate a reply from the zup.brain
 * We also handle incoming PAYLOADS that are generated as a result of clicking quick replies on facebook
 * PAYLOAD_FACEBOOK_GET_STARTED => Triggered when the user hits the get started button on facebook
 * PAYLOAD_FACEBOOK_PERSISTENT_MENU_HELP => Triggered when the user hits the persistent menu help button 
 * PAYLOAD_FACEBOOK_FLIPKART_SHOW_MORE => Triggered when the user hits the show more quick reply button on flipkart offers
 * PAYLOAD_FACEBOOK_FLIPKART_CANCEL => Triggered when the user hits the no quick reply button on flipkart offers
 * Handle special cases inside the catch block such as carousel, since we rejected them from all.js.
 * If the results generated by any feature is not a string in all.js we reject the Object as zup.brain.rive does not let you resolve custom objects
 */
function reply(session) {
    const userId = session.message.user.id
    const text = preProcessReply(session.message.text);
    zup.brain.reply(userId, text)
        .then((response) => {
            session.send(response);
        })
        .catch((response) => {
            handleSpecialReplies(session, response)
        })
}

function handleSpecialReplies(session, response) {
    if (response && response.type === 'carousel') {
        // carousel.sendFlipkartCarousel(session, zup.brain, response.data, response.filters)
        carousel.showFlipkartOffers(session, response.data, 'Displaying', 0, 10)

        //update the last active time when the user viewed flipkart results
        session.userData.flipkart.lastActive = new Date().getTime();

        //if we havent set a timeout previously, we set one
        if (!timeout) {
            timeout = setInterval(() => {
                let currentTime = new Date().getTime();
                if (currentTime - session.userData.flipkart.lastActive > 30000) {
                    if (zup.brain.getTopic(session.message.user.id) === 'offers') {
                        //send the quick reply asking the user if they would like to see more results
                        platforms.sendQuickReply(session, require('./json/quick_reply_flipkart_show_more.json'))
                    }
                    clearInterval(timeout)

                    //unset the timeout variable so that the person can see the quick reply once again after the next request to view flipkart carousel
                    timeout = null;
                }
            }, 30000)
        }
    }
    else if (response.type === 'location') {
        platforms.facebook.askLocation(session, response.data)
    }
    else {
        session.send(response);
    }
}

let zup = {
    brain: null,
    connector: connector
}

module.exports = zup;